/*

Given a string of length n, generate all of its subsequences. 

A subsequence of a given string (sequence) is a string (sequence) that is generated by 
removing zero or more characters from the given string (sequence) without changing its 
order.

Example
	
	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints
 
  1 < n < 10

*/

#include<iostream>
#include<set>

using namespace std;

set<string> s; // by default it is passed by value

void generateSubseqeunces(char* inp, char* out, int i, int j) {

	// base case
	if(inp[i] == '\0') { // or i == n
		// you've take 'n' decisions for each inp[] character therefore stop
		
		out[j] = '\0';
		s.insert(string(out));
		// cout << out << endl;
		
		return;
	}

	// recursive case

	// generate subsequences for inp[i...n-1] such that next free index in out[] is j
	// or take a sequence of n-i decisions starting from the character at the ith idx

	// make a decision for the character at the ith index of the inp[]

	// 1. include inp[i] in   out[]
	out[j] = inp[i];
	j++;
	generateSubseqeunces(inp, out, i+1, j);
	j--; // back-tracking step

	// 2. exclude inp[i] from out[]
	generateSubseqeunces(inp, out, i+1, j);


}

int main() {

	char inp[] = "abc";
	char out[10];

	generateSubseqeunces(inp, out, 0, 0);

	for(string subsequence : s) {
		cout << subsequence << endl;
	}
	
	return 0;
}
